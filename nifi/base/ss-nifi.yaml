---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nifi
  labels:
    app: "nifi"
spec:
  podManagementPolicy: Parallel
  serviceName: nifi-headless
  replicas: 1
  selector:
    matchLabels:
      app: nifi
      release: nifi
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: "nifi"
    spec:
      serviceAccountName: nifi-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - "nifi"
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: zookeeper
        imagePullPolicy: "IfNotPresent"
        image: busybox
        command:
        - sh
        - -c
        - |
          echo trying to contact nifi-zookeeper 2181
          until nc -vzw 1 nifi-zookeeper 2181; do
            echo "waiting for zookeeper..."
            sleep 2
          done
# yamllint disable rule:line-length
      containers:
      - name: server
        imagePullPolicy: "IfNotPresent"
        image: nifi
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
            echo "updating ${1} in ${target_file}"
            if egrep "^${1}=" ${target_file} &> /dev/null; then
              sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
            else
              echo ${1}=${2} >> ${target_file}
            fi
          }

          mkdir -p ${NIFI_HOME}/config-data/conf
          FQDN=$(hostname -f)

          cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"

          if [[ $(grep $(hostname) conf/authorizers.temp) ]]; then
            cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
          else
            cat "${NIFI_HOME}/conf/authorizers.empty" > "${NIFI_HOME}/conf/authorizers.xml"
          fi

          if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
            gzip /opt/nifi/data/flow.xml
          fi

          prop_replace nifi.remote.input.host ${FQDN}
          prop_replace nifi.cluster.node.address ${FQDN}
          prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}
          prop_replace nifi.web.http.host ${FQDN}
          prop_replace nifi.web.proxy.host nifi.nifi.svc
          prop_replace nifi.web.http.network.interface.default "eth0" nifi.properties
          prop_replace nifi.web.http.network.interface.lo "lo" nifi.properties


          exec bin/nifi.sh run & nifi_pid="$!"

          function offloadNode() {
              FQDN=$(hostname -f)
              echo "disconnecting node '$FQDN'"
              baseUrl=http://${FQDN}:8080

              echo baseUrl ${baseUrl}
              echo "gracefully disconnecting node '$FQDN' from cluster"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
              nnid=$(jq --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .nodeId' nodes.json)
              echo "disconnecting node ${nnid}"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi disconnect-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "get a connected node"
              connectedNode=$(jq -r 'first(.cluster.nodes|=sort_by(.address)| .cluster.nodes[] | select(.status=="CONNECTED")) | .address' nodes.json)
              baseUrl=http://${connectedNode}:8080
              echo baseUrl ${baseUrl}
              echo ""
              echo "wait until node has state 'DISCONNECTED'"
              while [[ "${node_state}" != "DISCONNECTED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
              echo ""
              echo "node '${nnid}' was disconnected"
              echo "offloading node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi offload-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "wait until node has state 'OFFLOADED'"
              while [[ "${node_state}" != "OFFLOADED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
          }

          deleteNode() {
              echo "deleting node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi delete-node -nnid ${nnid} -u ${baseUrl} ${secureArgs}
              echo "node deleted"
          }

          trap 'echo Received trapped signal, beginning shutdown...;offloadNode;./bin/nifi.sh stop;deleteNode;exit 0;' TERM HUP INT;
          trap ":" EXIT

          echo NiFi running with PID ${nifi_pid}.
          wait ${nifi_pid}
          
          /opt/nifi/nifi-toolkit-current/bin/tls-toolkit.sh standalone -n 'nifi-nifi-0.nifi-nifi-headless.nifi.svc.cluster.local' -C 'cn=admin,dc=example,dc=be' -o '/opt/nifi/nifi-current/conf/' -P env:PASS  -S env:PASS  --nifiPropertiesFile /opt/nifi/nifi-current/conf/nifi.properties
          exec bin/nifi.sh run
          
        resources: {}
        ports:
        - containerPort: 9092
          name: metrics
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 6007
          name: cluster
          protocol: TCP
        env:
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: nifi-zookeeper:2181
        readinessProbe:
          initialDelaySeconds: 60
          periodSeconds: 20
          tcpSocket:
            port: 8080
#           exec:
#             command:
#             - bash
#             - -c
#             - |
#
#               curl -kv \
#                 http://$(hostname -f):8080/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
#
#               STATUS=$(jq -r ".cluster.nodes[] | select((.address==\"$(hostname -f)\") or .address==\"localhost\") | .status" $NIFI_BASE_DIR/data/cluster.state)

#               if [[ ! $STATUS = "CONNECTED" ]]; then
#                 echo "Node not found with CONNECTED state. Full cluster state:"
#                 jq . $NIFI_BASE_DIR/data/cluster.state
#                 exit 1
#               fi
#
        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 60
          tcpSocket:
            port: 8080
        volumeMounts:
          - name: "data"
            mountPath: /opt/nifi/data
          - name: "auth-conf"
            mountPath: /opt/nifi/nifi-current/auth-conf/
          - name: "flowfile-repository"
            mountPath: /opt/nifi/flowfile_repository
          - name: "content-repository"
            mountPath: /opt/nifi/content_repository
          - name: "provenance-repository"
            mountPath: /opt/nifi/provenance_repository
          - name: "logs"
            mountPath: /opt/nifi/nifi-current/logs
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "authorizers-empty"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
            subPath: "authorizers.empty"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.xml
            subPath: "login-identity-providers.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "flow-content"
            mountPath: /opt/nifi/data/flow.xml
            subPath: "flow.xml"
      - name: app-log
        imagePullPolicy: "IfNotPresent"
        image: busybox
        args: [tail, -n+1, -F, /var/log/nifi-app.log]
        resources:
          limits:
            cpu: 50m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: bootstrap-log
        imagePullPolicy: "IfNotPresent"
        image: busybox
        args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
        resources:
          limits:
            cpu: 50m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: user-log
        imagePullPolicy: "IfNotPresent"
        image: busybox
        args: [tail, -n+1, -F, /var/log/nifi-user.log]
        resources:
          limits:
            cpu: 50m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        volumeMounts:
        - name: logs
          mountPath: /var/log
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: nifi-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: nifi-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "authorizers-empty"
        configMap:
          name: nifi-config
          items:
            - key: "authorizers-empty.xml"
              path: "authorizers.empty"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-xml"
        configMap:
          name: nifi-config
          items:
            - key: "login-identity-providers.xml"
              path: "login-identity-providers.xml"
      - name: "state-management-xml"
        configMap:
          name: nifi-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: nifi-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "flow-content"
        configMap:
          name: nifi-config
          items:
            - key: "flow.xml"
              path: "flow.xml"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: flowfile-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: content-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: provenance-repository
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: logs
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 5Gi
    - metadata:
        name: auth-conf
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 100Mi